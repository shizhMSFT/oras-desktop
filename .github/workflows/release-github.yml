name: release-github

on:
  push:
    tags:
      - v*

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
            arch: amd64
            artifact-extension: .zip
          - os: windows-latest
            platform: windows
            arch: arm64
            artifact-extension: .zip
          - os: ubuntu-latest
            platform: linux
            arch: amd64
            artifact-extension: .tar.gz
          - os: ubuntu-latest
            platform: linux
            arch: arm64
            artifact-extension: .tar.gz
          - os: macos-latest
            platform: darwin
            arch: arm64
            artifact-extension: '' # Empty, as we only use .app.zip for macOS

    runs-on: ${{ matrix.os }}
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Set up QEMU for ARM64 emulation
        if: matrix.arch == 'arm64' && matrix.os != 'macos-latest'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Restore dependencies
        run: dotnet restore OrasProject.OrasDesktop.sln

      - name: Build
        run: dotnet build OrasProject.OrasDesktop.sln --configuration Release --no-restore

      - name: Publish
        run: dotnet publish OrasProject.OrasDesktop.Desktop/OrasProject.OrasDesktop.Desktop.csproj --configuration Release --no-build --self-contained true -p:PublishSingleFile=true -p:PublishReadyToRun=true -p:PublishTrimmed=true -r ${{ matrix.platform }}-${{ matrix.arch == 'amd64' && 'x64' || matrix.arch }} -o ./publish

      - name: Extract version
        id: extract_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create macOS app bundle
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p "./OrasDesktop.app/Contents/MacOS"
          mkdir -p "./OrasDesktop.app/Contents/Resources"
          
          # Copy the executable to the app bundle
          cp ./publish/OrasProject.OrasDesktop.Desktop "./OrasDesktop.app/Contents/MacOS/"
          
          # Copy any resources if needed
          if [ -d "./publish/Assets" ]; then
            cp -r ./publish/Assets "./OrasDesktop.app/Contents/Resources/"
          fi
          
          # Create Info.plist
          cat > "./OrasDesktop.app/Contents/Info.plist" << EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>OrasProject.OrasDesktop.Desktop</string>
              <key>CFBundleIdentifier</key>
              <string>io.oras.desktop</string>
              <key>CFBundleName</key>
              <string>ORAS Desktop</string>
              <key>CFBundleDisplayName</key>
              <string>ORAS Desktop</string>
              <key>CFBundleVersion</key>
              <string>${{ steps.extract_version.outputs.version }}</string>
              <key>CFBundleShortVersionString</key>
              <string>${{ steps.extract_version.outputs.version }}</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>NSHighResolutionCapable</key>
              <true/>
          </dict>
          </plist>
          EOF
          
          # Make the executable file executable
          chmod +x "./OrasDesktop.app/Contents/MacOS/OrasProject.OrasDesktop.Desktop"
          
          # Move all remaining files to the MacOS directory
          find ./publish -type f -not -path "*/OrasProject.OrasDesktop.Desktop" -exec cp {} "./OrasDesktop.app/Contents/MacOS/" \;
          
          # Create a zip archive containing the .app bundle
          ditto -c -k --keepParent "./OrasDesktop.app" "./oras-desktop_${{ steps.extract_version.outputs.version }}_${{ matrix.platform }}_${{ matrix.arch }}.app.zip"
        shell: bash

      - name: Prepare artifacts (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Compress-Archive -Path ./publish/* -DestinationPath ./oras-desktop_${{ steps.extract_version.outputs.version }}_${{ matrix.platform }}_${{ matrix.arch }}${{ matrix.artifact-extension }}

      - name: Prepare artifacts (Unix)
        if: matrix.os == 'ubuntu-latest'
        run: |
          tar -czf ./oras-desktop_${{ steps.extract_version.outputs.version }}_${{ matrix.platform }}_${{ matrix.arch }}${{ matrix.artifact-extension }} -C ./publish .

      - name: Generate checksums
        run: |
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            pwsh -Command '$hash = (Get-FileHash -Algorithm SHA256 "./oras-desktop_${{ steps.extract_version.outputs.version }}_${{ matrix.platform }}_${{ matrix.arch }}${{ matrix.artifact-extension }}").Hash.ToLower(); "$hash  oras-desktop_${{ steps.extract_version.outputs.version }}_${{ matrix.platform }}_${{ matrix.arch }}${{ matrix.artifact-extension }}" | Out-File -Encoding utf8 "./oras-desktop_${{ steps.extract_version.outputs.version }}_${{ matrix.platform }}_${{ matrix.arch }}${{ matrix.artifact-extension }}.sha256"'
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            # Generate checksum for app.zip files only
            shasum -a 256 ./oras-desktop_${{ steps.extract_version.outputs.version }}_${{ matrix.platform }}_${{ matrix.arch }}.app.zip > ./oras-desktop_${{ steps.extract_version.outputs.version }}_${{ matrix.platform }}_${{ matrix.arch }}.app.zip.sha256
          else
            shasum -a 256 ./oras-desktop_${{ steps.extract_version.outputs.version }}_${{ matrix.platform }}_${{ matrix.arch }}${{ matrix.artifact-extension }} > ./oras-desktop_${{ steps.extract_version.outputs.version }}_${{ matrix.platform }}_${{ matrix.arch }}${{ matrix.artifact-extension }}.sha256
          fi
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: oras-desktop_${{ steps.extract_version.outputs.version }}_${{ matrix.platform }}_${{ matrix.arch }}
          path: |
            ${{ matrix.os != 'macos-latest' && format('./oras-desktop_{0}_{1}_{2}{3}', steps.extract_version.outputs.version, matrix.platform, matrix.arch, matrix.artifact-extension) || '' }}
            ${{ matrix.os != 'macos-latest' && format('./oras-desktop_{0}_{1}_{2}{3}.sha256', steps.extract_version.outputs.version, matrix.platform, matrix.arch, matrix.artifact-extension) || '' }}
            ${{ matrix.os == 'macos-latest' && format('./oras-desktop_{0}_{1}_{2}.app.zip', steps.extract_version.outputs.version, matrix.platform, matrix.arch) || '' }}
            ${{ matrix.os == 'macos-latest' && format('./oras-desktop_{0}_{1}_{2}.app.zip.sha256', steps.extract_version.outputs.version, matrix.platform, matrix.arch) || '' }}

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: List downloaded artifacts
        run: find ./artifacts -type f | sort
        shell: bash

      - name: Extract version from ref
        id: version
        run: echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Create combined checksums file
        run: |
          echo "# SHA256 checksums for ORAS Desktop ${{ github.ref_name }}" > oras-desktop_${{ steps.version.outputs.VERSION }}_checksums.txt
          echo "# Generated on $(date -u)" >> oras-desktop_${{ steps.version.outputs.VERSION }}_checksums.txt
          echo "" >> oras-desktop_${{ steps.version.outputs.VERSION }}_checksums.txt
          find ./artifacts -name "*.sha256" -type f | sort | xargs cat >> oras-desktop_${{ steps.version.outputs.VERSION }}_checksums.txt
          echo "Combined checksums file:"
          cat oras-desktop_${{ steps.version.outputs.VERSION }}_checksums.txt
        shell: bash

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: ORAS Desktop ${{ github.ref_name }}
          draft: true
          files: |
            ./artifacts/**/*.zip
            ./artifacts/**/*.tar.gz
            ./oras-desktop_${{ steps.version.outputs.VERSION }}_checksums.txt
          body: |
            ## ORAS Desktop ${{ github.ref_name }}
            
            ORAS Desktop is a cross-platform application for working with OCI artifacts in registries.
            
            ### Installation
            
            Download the appropriate binary for your platform and architecture:
            
            - Windows:
              - Intel/AMD 64-bit: `oras-desktop_${{ steps.version.outputs.VERSION }}_windows_amd64.zip`
              - ARM 64-bit: `oras-desktop_${{ steps.version.outputs.VERSION }}_windows_arm64.zip`
            - macOS:
              - Apple Silicon: `oras-desktop_${{ steps.version.outputs.VERSION }}_darwin_arm64.app.zip`
            - Linux:
              - Intel/AMD 64-bit: `oras-desktop_${{ steps.version.outputs.VERSION }}_linux_amd64.tar.gz`
              - ARM 64-bit: `oras-desktop_${{ steps.version.outputs.VERSION }}_linux_arm64.tar.gz`
            
            #### macOS Installation
            1. Download the `.app.zip` file
            2. Extract the zip file
            3. Move `OrasDesktop.app` to your Applications folder
            4. Right-click on the app and select "Open" (required the first time to bypass Gatekeeper)
            
            ### Checksums
            
            SHA256 checksums are provided in the `oras-desktop_${{ steps.version.outputs.VERSION }}_checksums.txt` file for verification.
            
            ```
            # Verify on Linux/macOS:
            sha256sum -c oras-desktop_${{ steps.version.outputs.VERSION }}_checksums.txt
            
            # Verify on Windows (PowerShell):
            Get-Content oras-desktop_${{ steps.version.outputs.VERSION }}_checksums.txt | Select-String -Pattern "^([0-9a-f]+)\s+(.+)$" | ForEach-Object { 
              $hash = $_.Matches.Groups[1].Value; 
              $file = $_.Matches.Groups[2].Value; 
              if ((Get-FileHash -Algorithm SHA256 $file).Hash.ToLower() -eq $hash) {
                "$file: OK"
              } else {
                "$file: FAILED"
              }
            }
            ```